 <string.h>
#include <conio.h>
#include <stdlib.h> /* Função exit*/
#include <ctype.h> /* Função toupper*/
#include <locale.h>

#define ARQ "Dados.Dat" /* Arquivo com os dados*/

#define OP_INSERIR '1'
#define OP_ALTERAR '2'
#define OP_APAGAR  '3'
#define OP_LISTAR '4'
#define OP_PESQUISAR '5'
#define OP_MAIS_ALUGADOS '6'
#define OP_MOSTRAR_EXEMPLARES '7'
#define OP_ALUGAR '8'
#define OP_DEVOLVER '9'

#define OP_SAIR '0'

#define OP_PESQ_ANO '1'
#define OP_PESQ_TITULO '2'

FILE *fp; /*Variável Global pois é útil ao longo do programa*/

typedef struct/*DATA:DIA,MES,ANO*/
{
	int Dia=0;
	int Mes=0;
	int Ano=0;
}DATA;
 
typedef struct/*LIVRO:CodigoL,StatusL,DATA DE,DATA DD*/
{
	//char CodigoL[4+1];
	char StatusL;/*I=Inesxistente / E=Existente / A=Alugado */
	DATA DE; // Data de Empréstimo
	DATA DD; // Data de Devolução
}LIVRO;

typedef struct/*OBRA:Titulo,autor,assunto,editora,ano,ediçao,
N_exemplares,N_emprestados,Cont,StatusO,,N_RegistroLIVRO Exemplar*/
{
	char Titulo[30+1];
	char Autores[100+1];
	char Assunto[30+1];
	char Editora[30+1];
	int Ano;
	int Edicao;
	int N_Exemplares; 
	int N_Emprestados;
	int Cont;
	char StatusO; 	/*Status da obra	'*' indica que o registro será apagado		*/	
	LIVRO Exemplar[4];
}OBRA;

/*funções*/
void Ler_Obra(OBRA *o);
void Mostrar_Obra(OBRA o);
void Mensagem(char *msg);
void Adicionar_Obra (OBRA o);
void Mais_Alugados();
void Alugar_livro();
void Devolver_livro();
void Inserir_Obra();
void Mostrar_Obra(OBRA o);
void Inic();
void Listar();
void Alterar_Obra();
void Apagar_Obra();
void Pesquisar_Titulo(char *s);
void Pesquisar_Ano (int ini, int fim);
void Mostrar_Exemplares();

/*___________________________________*/

void Ler_Obra(OBRA *o)
{
	int i;
	printf("Título	: ");gets(o->Titulo);
	printf("Autores	: ");gets(o->Autores);
	printf("Editora	: ");gets(o->Editora);
	printf("Ano	: ");scanf("%d",&o->Ano);
	printf("Edição	: ");scanf("%d",&o->Edicao);
	fflush(stdin);
	printf("Assunto	: ");gets(o->Assunto);
	printf("Quantidade de exemplares na biblioteca (0,1,2,3 ou 4)	: ");scanf("%d",&o->N_Exemplares);
	
	for(i=0;i<(o->N_Exemplares);i++)
	{
		if(i==4)
		{
			puts("\n\nquantidade de livros excessiva, ajustamos a quantidade para 4\n\n");
			break;
		};
		o->Exemplar[i].StatusL='E';
		
	}
	
	while(i<4)
	{
		o->Exemplar[i].StatusL='I';
		i++;
	}
	
	o->N_Emprestados=0;
	o->Cont=0;
	
	o->StatusO=' ';
	fflush(stdin);
}

void Mensagem(char *msg)
{
	printf(msg);
	getchar();
}

void Adicionar_Obra (OBRA o)
{
	fseek(fp,0L, SEEK_END);
	if(fwrite(&o,sizeof(o),1,fp)!=1)
		Mensagem("adicionar Pessoa: Falhou a escrita do registro");
}
  
void Mais_Alugados()/*em manutencao*/
{
	
}

void Alugar_livro()/*em manutencao*/
{
	OBRA x;
	char resp;
 	long int n_reg;
	printf("Qual o Nº do Registro: ");
	scanf("%ld", &n_reg);fflush(stdin);
	if(fseek(fp, (n_reg-1)*sizeof(OBRA),SEEK_SET)!=0)
		{
		Mensagem("Registro Inexistente ou Problemas no Posicionamento!!!");
		return;	
			
		}
	if(fread(&x,sizeof(OBRA),1,fp)!=1)
	{
		Mensagem("Problemas na leitura do Registro!!!");
		return;
	}
	if(x.StatusO=='*')
	{
		Mensagem("Um Registro Apagado não pode ser alugado!!!\n\n");
		return;
	}
		
	printf("\n\nDados Atuais\n\n");
	Mostrar_Obra(x);
	
	printf("\n\nDados dos exemplares:\n\n");
	
 	int i;
 	for(i=0;i<4;i++)
 	{
 		
 		printf("Exemplar %d: Status: %c ; Data de empréstimo:%d/%d/%d ; Data de devolução:%d/%d/%d\n\n",i+1,  x.Exemplar[i].StatusL,
 																						x.Exemplar[i].DE.Dia,
			 																			x.Exemplar[i].DE.Mes,
			 																			x.Exemplar[i].DE.Ano,
			 																			x.Exemplar[i].DD.Dia,
			 																			x.Exemplar[i].DD.Mes,
			 																			x.Exemplar[i].DD.Ano);
			
			 													
			 																				
		 
	 }
	 printf("Deseja alugar esse livro?<s/n> ");
	 resp=getchar();
       if (toupper(resp)=='S')
	 {
		 printf("Qual exemplar?");
		 scanf("%d",&i);
		 i--;
		 if(i<4)
		 {
		  	if((x.Exemplar[i].StatusL)=='I')
				printf("Exemplar não existente\n");
			 
	 		else if((x.Exemplar[i].StatusL)=='E')
			{
				printf("Data de Empréstimo:\n");
				scanf("%d",&x.Exemplar[i].DE.Dia);
				scanf("%d",&x.Exemplar[i].DE.Mes);
				scanf("%d",&x.Exemplar[i].DE.Ano);
			
				//fseek(fp,0L, SEEK_END); 		      	???
				//if(fwrite(&x,sizeof(x),1,fp)!=1) 	      	???
				//Mensagem("Falhou a escrita do registro");     ???
			
			}
		}
	fflush(stdin);
	puts("Aperte qualquer tecla para voltar ao menu principal");
	getchar();
	system("cls");

}

}
void Devolver_livro()/*em manutencao*/
{
	
}

void Inserir_Obra()
 {
 	OBRA o;
 	Ler_Obra(&o);
 	Adicionar_Obra(o);
 }
 /* Adiciona uma pessoa ao arquivo*/

void Mostrar_Obra(OBRA o)
{
	puts("\n\n");
	printf("Título:%s  \n\n",o.Titulo);
	printf("Autores:%s  \n\n",o.Autores);
	printf("Editora:%s  \n\n",o.Editora);
	printf("Ano:%d  \n\n",o.Ano);
	printf("Edição:%d  \n\n",o.Edicao);
	printf("Assunto:%s  \n\n",o.Assunto);
	printf("Quantidade de Exemplares existentes na biblioteca:%d  \n\n",o.N_Exemplares);
	printf("Quantidade de Exemplares Alugados:%d  \n\n",o.N_Emprestados);
	printf("Quantas vezes essa obra foi alugada:%d  \n\n",o.Cont);
}

void Inic()
{
	fp=fopen(ARQ,"r+b"); /*Tentar Abrir*/
	if(fp==NULL)
	{
		fp=fopen(ARQ,"w+b");
		if(fp==NULL)
		{
			fprintf(stderr,"ERRO FATAL: Impossível Criar Arquivo de Dados\n");
			exit(1);
		}
	}
}

void Listar()
 {
 	long int N_Linhas=0;
 	OBRA reg;
 	rewind(fp);
 	while(1)
 	{
 		if (fread(&reg,sizeof(reg),1,fp)!=1)break; /*Sair do Laço*/
 		
 		
 		if (reg.StatusO=='*')
		 continue; /*Passa ao próximo registro*/
 		
 		Mostrar_Obra(reg);
 		
 			puts("\n\n\n\n");
 			
 		N_Linhas++;
 		
 		if(N_Linhas%20==0)
 		Mensagem("PESSIONE <ENTER> para continuar	.	.	. ");
	 }
	Mensagem("PESSIONE <ENTER> para continuar	.	.	. "); /*No fim da Listagem*/ 
 }
 
 void Alterar_Obra()
 {
 	OBRA x;
 	long int n_reg;
	printf("Qual o Nº do Registro: ");
	scanf("%ld", &n_reg);fflush(stdin);
	if(fseek(fp, (n_reg-1)*sizeof(OBRA),SEEK_SET)!=0)
		{
		Mensagem("Registro Inexistente ou Problemas no Posicionamento!!!");
		return;	
			
		}
	if(fread(&x,sizeof(OBRA),1,fp)!=1)
	{
		Mensagem("Problemas na leitura do Registro!!!");
		return;
	}
	if(x.StatusO=='*')
	{
		Mensagem("Um Registro Apagado não pode ser alterado!!!\n\n");
		return;
	}
		
	printf("\n\nDados Atuais\n\n");
	Mostrar_Obra(x);
	printf("\n\nNovos Dados\n\n");
	Ler_Obra(&x);
	
	//Recuar um Registro no Arquivo
	fseek(fp,-(long) sizeof(OBRA),SEEK_CUR);
	//Reescrever o Registro;
	fwrite(&x,sizeof(OBRA),1,fp);
	fflush(fp); /*Despejar os Dados no Disco Rígido*/	 
 }
 
 void Apagar_Obra()
 {
 	OBRA x;
 	long int n_reg;
 	char resp;
 	
 	printf("Qual o Nº do Registro:");
 	scanf("%ld", &n_reg);fflush(stdin);
 	
 	if(fseek(fp, (n_reg-1)*sizeof(OBRA),SEEK_SET)!=0)
		{
		Mensagem("Registro Inexistente ou Problemas no Posicionamento!!!");
		return;	
			
		}
	if(fread(&x,sizeof(OBRA),1,fp)!=1)
	{
		Mensagem("Problemas na leitura do Registro!!!");
		return;
	}
	if(x.StatusO=='*')
	{
		Mensagem("O registro já está apagado!!!\n\n");
		return;
	}
	
	printf("\n\nDados Atuais\n\n");
	Mostrar_Obra(x);
	
	printf("\n\nApagar o Registro (s/n)???: "); resp=getchar(); fflush(stdin);
	if (toupper(resp)!='S') return;
	
	x.StatusO='*';
		//Recuar um Registro no Arquivo
	fseek(fp,-(long) sizeof(OBRA),SEEK_CUR);
	//Reescrever o Registro;
	fwrite(&x,sizeof(OBRA),1,fp);
	fflush(fp); /*Despejar os Dados no Disco Rígido*/	
	
 }
 
void Pesquisar_Titulo(char *s)
 {

 	OBRA reg;
 	rewind(fp);
 	
 	while(fread(&reg,sizeof(OBRA),1,fp))
 	if(reg.StatusO!='*'&&strstr(reg.Titulo,s))
 		Mostrar_Obra(reg);
 		
 	Mensagem("PESSIONE <ENTER> para continuar	.	.	. "); /*No fim da Listagem*/	
 }

 void Pesquisar_Ano (int ini, int fim)
{
	OBRA reg;
	rewind(fp);
	
	while(fread(&reg,sizeof(OBRA),1,fp))
	if(reg.StatusO!='*' && reg.Ano>=ini && reg.Ano<=fim)
		Mostrar_Obra(reg);
	
	Mensagem("PESSIONE <ENTER> para continuar	.	.	. "); /*No fim da Listagem*/		
 }
 
 void Mostrar_Exemplares()
{
	
 	OBRA x;
 	long int n_reg;
	printf("Qual o Nº do Registro: ");
	scanf("%ld", &n_reg);fflush(stdin);
	if(fseek(fp, (n_reg-1)*sizeof(OBRA),SEEK_SET)!=0)
		{
		Mensagem("Registro Inexistente ou Problemas no Posicionamento!!!");
		return;	
			
		}
	if(fread(&x,sizeof(OBRA),1,fp)!=1)
	{
		Mensagem("Problemas na leitura do Registro!!!");
		return;
	}
	if(x.StatusO=='*')
	{
		Mensagem("Um Registro Apagado não pode ser lido!!!\n\n");
		return;
	}
		
	printf("\n\nDados Atuais\n\n");
	Mostrar_Obra(x);
	
	printf("\n\nDados dos exemplares:\n\n");
	
 	int i;
 	for(i=0;i<4;i++)
 	{
 		
 			printf("Exemplar %d: Status: %c ; Data de empréstimo:%d/%d/%d ; Data de devolução:%d/%d/%d\n\n",i+1,  x.Exemplar[i].StatusL,
 																							x.Exemplar[i].DE.Dia,
			 																				x.Exemplar[i].DE.Mes,
			 																				x.Exemplar[i].DE.Ano,
			 																				x.Exemplar[i].DD.Dia,
			 																				x.Exemplar[i].DD.Mes,
			 																				x.Exemplar[i].DD.Ano);
			
			 													
			 																				
		 
	 }
	 
	puts("Aperte qualquer tecla para voltar ao menu principal");
	getchar();
	system("cls");

 	
 	
  } 

char *MainMenu[]=
{
	"1. Inserir Livro",
	"2. Alterar Livro",
	"3. Apagar Livro",
	"4. Listar Livros na biblioteca",
	"5. Pesquisas",
	"6. Listar livros mais alugados",
	"7. Listar os exemplares de um livro",
	"8. Alugar um livro",
	"9. Devolver um livro",
	"0. Sair",
	NULL	/* Acabaram as opções*/
};

char *PesqMenu[]=
{
	"1. Pesquisar por Intervalo  de Ano de Lançamento",
	"2. Pesquisar por Título",
	"0. Voltar",
	NULL	/* Acabaram as opções*/ 	
};

char Menu(char *Opcoes[])
 {
 	int i;
 	char ch;
 	
 	while(1)
 	{  
 		system("cls");
 		for(i=0;Opcoes[i]!=NULL; i++)
 		printf("\t\t%s\n\n",Opcoes[i]);
 		
 	printf("\n\n\tOpção: ");
 	ch=getchar(); fflush(stdin);
 	for(i=0; Opcoes[i]!=NULL; i++)
 	if(Opcoes[i][0]==ch)
 		return ch;
	 }
 }
 
int main()
 {
 	setlocale(LC_ALL, "Portuguese");
 	char Opcao;
 	system("color 0b");
 	Inic();
 	while((Opcao=Menu(MainMenu))!=OP_SAIR)
 		switch(Opcao)
 		{
 			
			case OP_INSERIR: Inserir_Obra();break;
 			case OP_ALTERAR: Alterar_Obra();break;
 			case OP_APAGAR:  Apagar_Obra(); break;
 			case OP_LISTAR:  Listar(); break;
 			case OP_MAIS_ALUGADOS: Mais_Alugados(); break;
 			case OP_MOSTRAR_EXEMPLARES: Mostrar_Exemplares();break;
 			case OP_ALUGAR:  Alugar_livro();break;
			case OP_DEVOLVER: Devolver_livro();break;
 			case OP_PESQUISAR:
 				while((Opcao=Menu(PesqMenu))!=OP_SAIR)
 				switch(Opcao)
 				{
 					case OP_PESQ_ANO:
 						{
 							int n1,n2;
 							printf("Qual o intervalo de anos de lançamento: ");
 							scanf("%d%d",&n1,&n2);fflush(stdin);
 							Pesquisar_Ano(n1,n2);
 							break; 
					 	}
					case OP_PESQ_TITULO:
						{
							char string[BUFSIZ+1];
							printf("Qual o título do livro a Procurar: ");
							gets(string);fflush(stdin);
							Pesquisar_Titulo(string);
						}
				 }
		 }
 }
