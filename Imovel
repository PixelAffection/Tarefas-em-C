#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h> /* Função exit*/
#include <ctype.h> /* Função toupper*/
#include <locale.h>

#define ARQ "Dados.Dat" /* Arquivo com os dados*/

#define OP_INSERIR '1'
#define OP_ALTERAR '2'
#define OP_APAGAR  '3'
#define OP_LISTAR '4'
#define OP_PESQUISAR '5'

#define OP_SAIR '0'

#define OP_PESQ_IDADE '1'
#define OP_PESQ_NOME '2'

char *MainMenu[]={
	"1. Inserir Imóvel",
	"2. Alterar Imóvel",
	"3. Apagar Imóvel",
	"4. Listar Imóvels",
	"5. Pesquisas",
	"0. Sair",
	NULL	/* Acabaram as opções*/
};

char *PesqMenu[]={
	"1. Listar Apartamentos",
	"2. Listar Casas",
	"3. Listar por Bairro",
	"4. Listar por Intervalo de Área",
	"5. Listar por Intervalo  de Preço",
	"0. Voltar",
	NULL	/* Acabaram as opções*/ 	
};


FILE *fp; /*Variável Global pois é útil ao longo do programa*/


typedef struct
{
	int n_registro;
	char Identificacao[4+1];
	char Bairro[30+1];
	char Endereco[30+1];
	int n_quartos;
	float Area;
	float Aluguel;
	char Status; 	/*		'*' indica que o registro será apagado		*/
}IMOVEL;


void Copiar_Imovel(IMOVEL *dest, IMOVEL orig)
{	
	dest->n_quartos=orig.n_quartos;
	dest->Aluguel = orig.Aluguel ;
	dest->Area = orig.Area ;
	dest->Status = orig.Status ;
	
	strcpy(dest->Bairro,orig.Bairro);
	strcpy(dest->Endereco,orig.Endereco);
	strcpy(dest->Identificacao,orig.Identificacao);

}

void Mensagem(char *msg);


void Ler_Imovel(IMOVEL *i)
{
	int op;
	
	printf("É uma Casa ou um Apartamento?\n\n");
	puts("Digite 1 para Casa\n\n");
	puts("Digite 2 para Apartamento\n\n");
	scanf("%d",&op);
	
	switch(op)
	{
		case 1: i->Identificacao="CASA";break;
		case 2: i->Identificacao="APTO";break;
		default: puts("Opção inválida: Tente novamente, digitando 1 ou 2.") return;
	}
	printf("Número de quartos	: ");scanf("%d",&i->n_quartos);fflush(stdin);
	printf("Área total	: ");scanf("%f",&i->Area);fflush(stdin);
	printf("Bairro	: ");gets(i->Bairro);fflush(stdin);
	printf("Endereço	: ");gets(i->Endereco]);fflush(stdin);
	printf("Preço do Aluguel");scanf("%f",&i->Aluguel);fflush(stdin);
	i->Status=' ';
	fflush(stdin);
}

void Mostrar_Imovel(IMOVEL i)
{
	puts("\n\n");
	printf("Número de Registro:%d  \n\n",o.n_registro+1);
	printf("Número de Registro:%d	\n\n",i.n_registro);
	printf("Identificação (Casa ou Apto.):%s	\n\n",i.Identificacao);
	printf("Bairro:%s	\n\n",i.Bairro);
	printf("Endereço:%s	\n\n",i.Endereco);
	printf("Número de Quartos:%d	\n\n;",i.n_quartos);
	printf("Área total:%f	\n\n",i.Area);
	printf("Aluguel:%f	\n\n",i.Aluguel);
}

void Adicionar_Imovel (IMOVEL i)
{
	fseek(fp,0L, SEEK_END);
	if(fwrite(&i,sizeof(i),1,fp)!=1)
		Mensagem("adicionar Pessoa: Falhou a escrita do registro");
}

void Mensagem(char *msg)
{
	printf(msg);
	getchar();
}

void Inic()
{
	fp=fopen(ARQ,"r+b"); /*Tentar Abrir*/
	if(fp==NULL)
	{
		fp=fopen(ARQ,"w+b");
		if(fp==NULL)
		{
			fprintf(stderr,"ERRO FATAL: Impossível Criar Arquivo de Dados\n");
			exit(1);
		}
	}
}

char Menu(char *Opcoes[])
 {
 	int i;
 	char ch;
 	
 	while(1)
 	{  /*Cls*/
 		printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 		for(i=0;Opcoes[i]!=NULL; i++)
 		printf("\t\t%s\n\n",Opcoes[i]);
 		
 	printf("\n\n\tOpção: ");
 	ch=getchar(); fflush(stdin);
 	for(i=0; Opcoes[i]!=NULL; i++)
 	if(Opcoes[i][0]==ch)
 		return ch;
	 }
 }

void Inserir_Imovel()
 {
 	IMOVEL x;
 	Ler_Imovel(&x);
 	Adicionar_Imovel(x);
 }

void Alterar_Imovel()
 {
 	IMOVEL x;
 	long int n_reg;
	printf("Qual o Nº do Registro: ");
	scanf("%ld", &n_reg);fflush(stdin);
	if(fseek(fp, (n_reg-1)*sizeof(IMOVEL),SEEK_SET)!=0)
		{
		Mensagem("Registro Inexistente ou Problemas no Posicionamento!!!");
		return;	
			
		}
	if(fread(&x,sizeof(IMOVEL),1,fp)!=1)
	{
		Mensagem("Problemas na leitura do Registro!!!");
		return;
	}
	if(x.Status=='*')
	{
		Mensagem("Um Registro Apagado não pode ser alterado!!!\n\n");
		return;
	}
		
	printf("\n\nDados Atuais\n\n");
	Mostrar_Imovel(x);
	printf("\n\nNovos Dados\n\n");
	Ler_Imovel(&x);
	
	//Recuar um Registro no Arquivo
	fseek(fp,-(long) sizeof(IMOVEL),SEEK_CUR);
	//Reescrever o Registro;
	fwrite(&x,sizeof(IMOVEL),1,fp);
	fflush(fp); /*Despejar os Dados no Disco Rígido*/	 
 }

 void Apagar_Imovel()
 {
 	IMOVEL x;
 	long int n_reg;
 	char resp;
 	
 	printf("Qual o Nº do Registro:");
 	scanf("%ld", &n_reg);fflush(stdin);
 	
 	if(fseek(fp, (n_reg-1)*sizeof(IMOVEL),SEEK_SET)!=0)
		{
		Mensagem("Registro Inexistente ou Problemas no Posicionamento!!!");
		return;	
			
		}
	if(fread(&x,sizeof(IMOVEL),1,fp)!=1)
	{
		Mensagem("Problemas na leitura do Registro!!!");
		return;
	}
	if(x.Status=='*')
	{
		Mensagem("O registro já está apagado!!!\n\n");
		return;
	}
	
	printf("\n\nDados Atuais\n\n");
	Mostrar_Imovel(x);
	
	printf("\n\nApagar o Registro (s/n)???: "); resp=getchar(); fflush(stdin);
	if (toupper(resp)!='S') return;
	
	x.Status='*';
		//Recuar um Registro no Arquivo
	fseek(fp,-(long) sizeof(IMOVEL),SEEK_CUR);
	//Reescrever o Registro;
	fwrite(&x,sizeof(IMOVEL),1,fp);
	fflush(fp); /*Despejar os Dados no Disco Rígido*/	
	
 }

 void Listar()
 {
 	long int N_Linhas=0;
 	IMOVEL reg;
 	rewind(fp);
 	while(1)
 	{
 		if (fread(&reg,sizeof(reg),1,fp)!=1)break; /*Sair do Laço*/
 		if (reg.Status=='*')continue; /*Passa ao próximo registro*/
 		Mostrar_Imovel(reg);
 		N_Linhas++;
 		if(N_Linhas%20==0)
 		Mensagem("PESSIONE <ENTER> para continuar	.	.	. ");
	 }
	Mensagem("PESSIONE <ENTER> para continuar	.	.	. "); /*No fim da Listagem*/ 
 }

void Pesquisar_Area (float ini, float fim)
{
	IMOVEL reg;
	rewind(fp);
	
	while(fread(&reg,sizeof(IMOVEL),1,fp))
	if(reg.Status!='*' && reg.Area>=ini && reg.Area<=fim)
		Mostrar_Imovel(reg);
	
	Mensagem("PESSIONE <ENTER> para continuar	.	.	. "); /*No fim da Listagem*/		
 } 

 void Pesquisar_Precos (float ini, float fim)
{
	IMOVEL reg;
	rewind(fp);
	
	while(fread(&reg,sizeof(IMOVEL),1,fp))
	if(reg.Status!='*' && reg.Aluguel>=ini && reg.Aluguel<=fim)
		Mostrar_Imovel(reg);
	
	Mensagem("PESSIONE <ENTER> para continuar	.	.	. "); /*No fim da Listagem*/		
 } 
 
  void Pesquisar_Bairro(char *s)
 {
 	IMOVEL reg;
 	rewind(fp);
 	
 	while(fread(&reg,sizeof(IMOVEL),1,fp))
 	if(reg.Status!='*'&&strstr(reg.Bairro,s))
 		Mostrar_Imovel(reg);
 		
 	Mensagem("PESSIONE <ENTER> para continuar	.	.	. "); /*No fim da Listagem*/	
 }
 
void Pesquisar_Casa()
{
	IMOVEL reg;
 	rewind(fp);
 	
 	while(fread(&reg,sizeof(IMOVEL),1,fp))
 	if(reg.Status!='*'&&(strcmp(reg.Identificacao,"CASA"==0)))
 		Mostrar_Imovel(reg);
 		
 	Mensagem("PESSIONE <ENTER> para continuar	.	.	. "); /*No fim da Listagem*/	
}

void Pesquisar_Apto()
{
	IMOVEL reg;
 	rewind(fp);
 	
 	while(fread(&reg,sizeof(IMOVEL),1,fp))
 	if(reg.Status!='*'&&(strcmp(reg.Identificacao,"APTO"==0)))
 		Mostrar_Imovel(reg);
 		
 	Mensagem("PESSIONE <ENTER> para continuar	.	.	. "); /*No fim da Listagem*/	
}


